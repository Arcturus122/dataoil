# AUTOGENERATED! DO NOT EDIT! File to edit: api.ipynb (unless otherwise specified).

__all__ = ['Api', 'series']

# Cell
import urllib.request, urllib.error, json, os, datetime
import pandas as pd

series = {
    "WTI":"PET.RWTC.D",
    "BRENT":"PET.RBRTE.D"
}

class Api:
    "class responsible for fetching data from EIA using your `api_key`"
    def __init__(self, api_key=None):
        "if `api_key` is None then it will automatically read your credentials.json file to find the api_key key"
        if api_key is not None:
            self.api_key = api_key
        else:
            try:
                with open('credentials.json','r') as f:
                    data = json.load(f)
                    self.api_key = data['api_key']
            except:
                print('could not read credentials.json or get api_key value from it')

    def _request(self, url):
        "request an EIA endpoint `url` and return a json object"
        try:
            with urllib.request.urlopen(url) as url:
                return json.loads(url.read().decode())
        except urllib.error.URLError as e:
            print(e.reason)
        except json.JSONDecodeError as e:
            print(e)

    def fetch_spot(self, series_id="WTI"):
        "fetch spot price of a specific `series_id` e.g BRENT or WTI and return a pandas DataFrame"
        if series_id not in series.keys():
            raise ValueError('{} not recognized as a valid series id'.format(series_id))
        url = 'http://api.eia.gov/series/?api_key={}&series_id={}'.format(self.api_key, series[series_id])
        data = self._request(url)
        df = pd.DataFrame(data['series'][0]['data'])
        df.columns = ['date','price']
        df.date = df.date.apply(lambda x : datetime.datetime.strptime(x, '%Y%m%d'))
        return df
